import java.io.File;
import java.io.FileOutputStream;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class XmlContentReplacer {

   public static void main(String[] args) {
      try {
         // Load the XML file
         File inputFile = new File("input.xml");
         DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
         DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
         Document doc = dBuilder.parse(inputFile);

         // Replace values in the document
         replaceContent(doc, "vinoth", "vino");
         replaceContent(doc, "1234", "4567");
         replaceContent(doc, "02/02/02", "07/08/23");

         // Write the modified document to a file
         TransformerFactory transformerFactory = TransformerFactory.newInstance();
         Transformer transformer = transformerFactory.newTransformer();
         DOMSource source = new DOMSource(doc);
         StreamResult result = new StreamResult(new FileOutputStream("output.xml"));
         transformer.transform(source, result);

         System.out.println("Replacement complete. Check output.xml for the updated content.");
      } catch (Exception e) {
         e.printStackTrace();
      }
   }

   // Recursively replace content in the document
   private static void replaceContent(Node node, String oldValue, String newValue) {
      if (node.getNodeType() == Node.ELEMENT_NODE) {
         // Replace attribute values
         Element element = (Element) node;
         for (int i = 0; i < element.getAttributes().getLength(); i++) {
            Node attribute = element.getAttributes().item(i);
            if (attribute.getNodeValue().contains(oldValue)) {
               attribute.setNodeValue(attribute.getNodeValue().replace(oldValue, newValue));
            }
         }
         // Replace element text content
         if (element.getTextContent().contains(oldValue)) {
            element.setTextContent(element.getTextContent().replace(oldValue, newValue));
         }
      }
      // Recursively replace content in child nodes
      NodeList nodeList = node.getChildNodes();
      for (int i = 0; i < nodeList.getLength(); i++) {
         Node childNode = nodeList.item(i);
         replaceContent(childNode, oldValue, newValue);
      }
   }
}
